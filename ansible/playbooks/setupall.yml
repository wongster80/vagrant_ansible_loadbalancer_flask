---

- hosts: web
  sudo: yes

  vars:
    app_name: hello_app_flask
    repo_url: https://github.com/wongster80/vagrant_ansible_loadbalancer_flask.git
    repo_remote: origin
    repo_version: master
    webapps_dir: /srv/webapps
    wsgi_file: wsgi.py
    wsgi_callable: app

  tasks:
    - name: add nginx ppa
      action: apt_repository repo=ppa:nginx/stable state=present
    
    - name: install python packages
      action: apt pkg={{item}} state=installed
      with_items:
        - python-dev
        - python-setuptools
        - git-core
        - nginx
        - libxml2-dev

    - name: install pip
      action: easy_install name=pip
    
    - name: install libraries with pip
      action: pip name={{item}} state=present
      with_items:
        - virtualenv
        - supervisor
        - uwsgi
    
    - name: remove default nginx site
      action: file path=/etc/nginx/sites-enabled/default state=absent
    
    - name: write nginx.conf
      action: template src=templates/nginx.conf dest=/etc/nginx/nginx.conf
    
    - name: create supervisord config folder
      action: file dest=/etc/supervisor state=directory owner=root
    
    - name: create supervisord config
      action: template src=templates/supervisord.conf dest=/etc/supervisord.conf
    
    - name: create supervisord init script
      action: template src=templates/supervisord.sh dest=/etc/init.d/supervisord mode=0755
    
    - name: start supervisord service and run at system startup
      action: service name=supervisord state=started enabled=yes
    
    - name: create webapps directory
      action: file dest=/srv/webapps state=directory

    - name: create log directory
      action: file dest={{webapps_dir}}/{{app_name}}/log state=directory
      
    - name: clone code from repository
      action: git repo={{repo_url}} dest={{webapps_dir}}/{{app_name}}/src remote={{repo_remote}} version={{repo_version}} force=yes
      
    - name: install requirements into virtualenv
      action: pip requirements={{webapps_dir}}/{{app_name}}/src/requirements.txt virtualenv={{webapps_dir}}/{{app_name}}/venv state=present
  
    - name: create supervisor program config
      action: template src=templates/supervisor.ini dest=/etc/supervisor/{{app_name}}.ini
      notify:
        - restart app
  
    - name: create nginx site config
      action: template src=templates/nginx_site.conf dest=/etc/nginx/sites-available/{{app_name}}.conf
      notify:
        - restart nginx
  
    - name: link nginx config
      action: file src=/etc/nginx/sites-available/{{app_name}}.conf dest=/etc/nginx/sites-enabled/{{app_name}}.conf state=link
  
    - name: reread supervisord config
      action: supervisorctl name={{app_name}} state=present

#    - name: update supervisord config
#      action: supervisorctl name={{app_name}} state=restarted

    - name: start app
      action: supervisorctl name={{app_name}} state=started
  
  handlers:
    - name: restart app
      action: supervisorctl name={{app_name}} state=restarted
  
    - name: restart nginx
      action: service name=nginx state=restarted

# lb
- hosts: lb
  sudo: yes

  tasks:

  - name: install haproxy and socat
    apt: pkg={{ item }} state=latest
    with_items:
    - haproxy
    - socat

  - name: enable haproxy
    lineinfile: dest=/etc/default/haproxy regexp="^ENABLED" line="ENABLED=1"
    notify: restart haproxy

  - name: deploy haproxy config
    template: src=templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
    notify: restart haproxy

  handlers:

  - name: restart haproxy
    service: name=haproxy state=restarted

#ufw firewall all
- hosts: all
  sudo: yes
  
  tasks:
  
    - name: install ufw packages
      apt: state=installed pkg=ufw

    - name: disable ufw
      ufw: state=disabled 
#      
#    - name: setup ufw
#      ufw: state=enabled policy=deny
#      
#    - name: ufw allow ssh traffic
#      ufw: rule=allow port=ssh
#    
#    - name: ufw allow http traffic
#      ufw: rule=allow port=http
      
#ufw firewall web
#- hosts: web
#  sudo: yes
#  
#  tasks:      
#    - name: ufw allow uwsgi<->nginx traffic port
#      ufw: rule=allow port=9002 proto=tcp
